/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package renok;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author friend
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindows
     * @param args
     */
    public MainWindow(String args[]) {
        initComponents();
        
        
        
        if (args.length == 1) {
            this.jTextField1.setText(args[0]);
        }
        if (args.length == 2) {
            this.jTextField1.setText(args[0]);
            this.jTextField2.setText(args[1]);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDocuments = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListComments = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListDocSize = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("/home/friend/2014HYLSON/doutoradoUFSC/references/documents/");

        jLabel1.setText("Path to PDF documents:");

        jLabel2.setText("Path to Okular comments:");

        jTextField2.setText("/home/friend/.kde/share/apps/okular/docdata/");

        jListDocuments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDocumentsMouseClicked(evt);
            }
        });
        jListDocuments.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDocumentsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListDocuments);

        jListComments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListCommentsMouseClicked(evt);
            }
        });
        jListComments.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListCommentsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListComments);

        jButton1.setText("mark all comments related to some document (comparison by doc. size)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("load");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("load");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(jListDocSize);

        jButton4.setText("mark only comments related to docs but with different name of doc.");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Rename comment file name to document file name");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Confirm rename operation");

        jLabel3.setText("Last action: ");

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(3);
        jTextArea2.setWrapStyleWord(true);
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(4, 4, 4)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                            .addComponent(jCheckBox1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jButton5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap())
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //System.out.println(jTextField1.getText());
        DefaultListModel list = new DefaultListModel();
        DefaultListModel list2 = new DefaultListModel();
        
        ArrayList<String> files = new ArrayList();
        
        File actual = new File(jTextField1.getText());
        for( File f : actual.listFiles()){
            if (f.getName().contains(".pdf")) {
                files.add(f.getName());
            }
        }
        
        Collections.sort(files);
        
        for (String s : files) {
            File f = new File(jTextField1.getText()+s);
            list.addElement(f.getName());
            list2.addElement(f.length());
        }
        
        
        
        jListDocuments.setModel(list);
        jListDocSize.setModel(list2);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultListModel list = new DefaultListModel();
        ArrayList<String> files = new ArrayList();
        
        File actual = new File(jTextField2.getText());
        for( File f : actual.listFiles()){
            files.add(f.getName());
        }
        Collections.sort(files);
        
        for (String s : files) {
            File f = new File(jTextField2.getText()+s);
            list.addElement(f.getName());
        }
       
        jListComments.setModel(list);
    }//GEN-LAST:event_jButton3ActionPerformed

    public int getRelatedCommentIndex(String s) {
        for (int i = 0; i < jListComments.getModel().getSize(); i++) {
            String com = (String) jListComments.getModel().getElementAt(i);
            if (com.contains(s)) {
                return i;
            }
        }
        return -1;
    }
    
    public int listModelContains(ListModel list, String s) {
        for (int i = 0; i < list.getSize(); i++) {
            String com = String.valueOf(list.getElementAt(i));
            if (com.contains(s)) {
                return i;
            }
        }
        return -1;
    }
    
    int[] addElement(int[] a, int e) {
        a = Arrays.copyOf(a, a.length + 1);
        a[a.length - 1] = e;
        return a;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int[] select = {};
        for (int i = 0; i < jListDocSize.getModel().getSize(); i++) {
            Object size = jListDocSize.getModel().getElementAt(i);
            String s = String.valueOf(size);
            int p = getRelatedCommentIndex(s);
            if (p >= 0) {
                select = addElement(select, p);
            }
            //int[] select2 = {2, 3, 6};
            jListComments.setSelectedIndices(select);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jListDocumentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDocumentsMouseClicked
        // TODO add your handling code here:
        int i = jListDocuments.getSelectedIndex();
        jListDocSize.setSelectedIndex(i);
        jListDocSize.ensureIndexIsVisible(i);
        Object ob = jListDocSize.getModel().getElementAt(i);
        String s = String.valueOf(ob); //get the size of the document
        boolean enableButton = false;
        int j = getRelatedCommentIndex(s); //there is comment file ?
        if (j >= 0) {
            enableButton = true;
            int p1 = jListComments.getSelectedIndex();
            boolean needToScrool = false;
            if (p1 < 0) { //there is no comment file selected?
                p1 = j;
                needToScrool = true;
            }
            else {
                String ver = String.valueOf(jListComments.getModel().getElementAt(p1));
                int p = ver.indexOf('.');
                ver = ver.substring(0,p);
                //System.out.println(ver+ " and "+s);
                if (!ver.equals(s)) { //the comment selected is not the desired?
                    needToScrool = true;
                }
            }
            jListComments.setSelectedIndex(j);
            if (needToScrool) {
                    jListComments.ensureIndexIsVisible(j);
            }
        }
        jButton5.setEnabled(enableButton);
    }//GEN-LAST:event_jListDocumentsMouseClicked

    private void jListDocumentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDocumentsValueChanged
        // TODO add your handling code here:
        jListDocumentsMouseClicked(null);
    }//GEN-LAST:event_jListDocumentsValueChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int[] select = {};
        for (int i = 0; i < jListDocSize.getModel().getSize(); i++) {
            Object size = jListDocSize.getModel().getElementAt(i);
            String s = String.valueOf(size);
            int p = getRelatedCommentIndex(s);
            if (p >= 0) {
                String com = String.valueOf(jListComments.getModel().getElementAt(p));
                String doc = String.valueOf(jListDocuments.getModel().getElementAt(i));
                doc = s + "." + doc + ".xml";
                if (!doc.equals(com)) {
                    select = addElement(select, p);
                }
            }
            //int[] select2 = {2, 3, 6};
            jListComments.setSelectedIndices(select);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jListCommentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListCommentsMouseClicked
        // TODO add your handling code here:
        jButton5.setEnabled(false);
        String com = String.valueOf(jListComments.getModel().getElementAt(jListComments.getSelectedIndex()));
        int p1 = com.indexOf('.');
        String tamanho = com.substring(0, p1);
        int p = listModelContains(jListDocSize.getModel(), tamanho);
        if (p >= 0) {
            jListDocuments.setSelectedIndex(p);
            jListDocuments.ensureIndexIsVisible(p);
            jListDocSize.setSelectedIndex(p);
            jListDocSize.ensureIndexIsVisible(p);
            jButton5.setEnabled(true);
        }
        //verify if the filenames are different
        int p2 = jListDocuments.getSelectedIndex();
        if (p2 >= 0) {
            String doc = String.valueOf(jListDocuments.getModel().getElementAt(p1));
            String testDocName = tamanho + "." + doc + ".xml";
            if (testDocName.equals(com)) {
                jTextArea2.setText("The document and comment file names are EQUALS and does not need to be renamed.");
            }
            else
            {
                jTextArea2.setText("");
            }
        }
    }//GEN-LAST:event_jListCommentsMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        boolean cont = true;
        if (jCheckBox1.isSelected()) {
            int resp = JOptionPane.showConfirmDialog(null, "Confirm rename operation? After rename operation, you must reload the comments list to see the changes.", "Confirmation", JOptionPane.YES_NO_OPTION);
            if ((resp == JOptionPane.NO_OPTION) | (resp == JOptionPane.CLOSED_OPTION)) {
                cont = false;
            }
        }
        if (cont) {
            String doc = String.valueOf(jListDocuments.getModel().getElementAt(jListDocuments.getSelectedIndex()));
            String com = String.valueOf(jListComments.getModel().getElementAt(jListComments.getSelectedIndex()));
            String size = String.valueOf(jListDocSize.getModel().getElementAt(jListDocSize.getSelectedIndex()));
            String newCom = size + "." + doc + ".xml";
            
            String path = jTextField2.getText();
            File file = new File(path+com);
            File file2 = new File(path+newCom);
            boolean success = file.renameTo(file2);
            if (success) {
                jTextArea2.setText(com+" [** RENAMED TO **] "+newCom + " SUCCESSFULLY");
            }
            else
            {
                jTextArea2.setText("FAILED TO RENAME: "+ path+com+" to ====> "+path+newCom);           }
            
            
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jListCommentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListCommentsValueChanged
        // TODO add your handling code here:
        //jListCommentsMouseClicked(null);
    }//GEN-LAST:event_jListCommentsValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow(args).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListComments;
    private javax.swing.JList jListDocSize;
    private javax.swing.JList jListDocuments;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
